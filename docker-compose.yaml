version: '3.8'

services:
  # DevPocket API Server
  devpocket-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: devpocket-api
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://mongo:27017
      - DATABASE_NAME=devpocket
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
    env_file:
      - .env
    depends_on:
      - mongo
      - redis
    networks:
      - devpocket-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: devpocket-mongo
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=devpocket123
      - MONGO_INITDB_DATABASE=devpocket
    volumes:
      - mongo-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - devpocket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for caching and rate limiting
  redis:
    image: redis:7.2-alpine
    container_name: devpocket-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass devpocket123
    volumes:
      - redis-data:/data
    networks:
      - devpocket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: devpocket-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - devpocket-api
    networks:
      - devpocket-network
    restart: unless-stopped

  # MongoDB Admin Interface (optional)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: devpocket-mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=devpocket123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:devpocket123@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo
    networks:
      - devpocket-network
    restart: unless-stopped
    profiles: ["tools"]

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: devpocket-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - devpocket-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: devpocket-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=devpocket123
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - devpocket-network
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  devpocket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local